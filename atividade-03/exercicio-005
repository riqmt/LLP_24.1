1. Atividade com `while`:
- Descrição: Escreva um programa que exiba os números pares de 1 a 10 usando um loop `while`.
- Dica: Use o operador de módulo (`%`) para verificar se um número é par.
RESPOSTA:

#include <stdio.h>

int main() {
    int i = 1;

    printf("Números pares de 1 a 10:\n");
    while (i <= 10) {
        if (i % 2 == 0) {
            printf("%d\n", i);
        }
        i++;
    }

    return 0;
}

2. Atividade com `do while`:
- Descrição: Crie um programa que solicite ao usuário que adivinhe um número entre 1 e 100. O programa deve continuar pedindo até que o usuário acerte o número ou digite `-1` para sair.
- Dica: Use um loop `do while` para repetir a solicitação.
RESPOSTA:

#include <stdio.h>
#include <stdlib.h>
#include <time.h>

int main() {
    srand(time(NULL));
    int numero_secreto = rand() % 100 + 1;
    int chute;

    printf("Adivinhe um número entre 1 e 100 (-1 para sair):\n");
    do {
        scanf("%d", &chute);

        if (chute == -1) {
            printf("Você desistiu!\n");
        } else if (chute < numero_secreto) {
            printf("Muito baixo! Tente novamente.\n");
        } else if (chute > numero_secreto) {
            printf("Muito alto! Tente novamente.\n");
        } else {
            printf("Parabéns! Você acertou o número secreto: %d\n", numero_secreto);
        }
    } while (chute != -1 && chute != numero_secreto);

    return 0;
}


3. Atividade com `for`:
- Descrição: Escreva um programa que calcule a soma dos primeiros 10 números inteiros positivos usando um loop `for`.
- Dica: Use uma variável acumuladora para calcular a soma.
RESPOSTA:

#include <stdio.h>

int main() {
    int soma = 0;

    for (int i = 1; i <= 10; i++) {
        soma += i;
    }

    printf("A soma dos primeiros 10 números inteiros positivos é: %d\n", soma);

    return 0;
}

